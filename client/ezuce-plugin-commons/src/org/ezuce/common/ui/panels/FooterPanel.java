package org.ezuce.common.ui.panels;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;

import org.ezuce.common.CachePhoneBook;
import org.ezuce.common.Paginator;
import org.ezuce.common.event.ContactListEntryEvent;
import org.ezuce.common.resource.Utils;
import org.ezuce.common.ui.wrappers.ContactItemWrapper;
import org.ezuce.common.ui.wrappers.interfaces.ContactListEntry;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jivesoftware.spark.SparkManager;
import org.jivesoftware.spark.ui.ContactItem;
import org.jivesoftware.spark.ui.ContactList;

/**
 *
 * @author Razvan
 */
public class FooterPanel extends javax.swing.JPanel {
   
    private final ResourceMap resourceMap=Application.getInstance().getContext().getResourceMap(UserGroupPanel.class);
    private final Cursor hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);
    private final Cursor defaultCursor = new Cursor(Cursor.DEFAULT_CURSOR);
    boolean onlyRoster;
    private MouseListener mouseListener;
    private GroupsPanel groupsPanel;
    
    
    /** Creates new form FooterPanel */
    public FooterPanel(MouseListener mouseListener, GroupsPanel groupsPanel, boolean onlyRoster){
    	this.onlyRoster = onlyRoster;
    	setVisible(!onlyRoster);
        initComponents();
        this.mouseListener = mouseListener;
        this.groupsPanel = groupsPanel;
    }

	/** This method is called from within the constructor to
     * initialize the form.x
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        setMaximumSize(new Dimension(32000,30));
        setMinimumSize(new Dimension(100,30));
        setPreferredSize(new Dimension(340,30));      
      
        setOpaque(false);

        jButtonNext = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButtonPrevious = new javax.swing.JButton();
        currentPage = new javax.swing.JLabel();
        currentPage.setMaximumSize(new Dimension(14,14));
        currentPage.setMinimumSize(new Dimension(14,14));
        currentPage.setPreferredSize(new Dimension(14,14));
        jLabel2 = new javax.swing.JLabel();
        nrPages = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        ResourceMap resourceMap = Application.getInstance().getContext().getResourceMap(FooterPanel.class);
        javax.swing.ActionMap actionMap = Application.getInstance().getContext().getActionMap(this);
        jButtonNext.setAction(actionMap.get("nextPage")); // NOI18N
        jButtonNext.setIcon(resourceMap.getIcon("jButtonNext.icon")); // NOI18N
        jButtonNext.setText(resourceMap.getString("jButtonNext.text")); // NOI18N
        jButtonNext.setBorder(null);
        jButtonNext.setContentAreaFilled(false);
        jButtonNext.setFocusPainted(false);
        jButtonNext.setHideActionText(true);
        jButtonNext.setName("jButtonNext"); // NOI18N
       
        jProgressBar1.setName("jProgressBar1"); // NOI18N
    	
        jButtonPrevious.setAction(actionMap.get("prevPage"));
        jButtonPrevious.setIcon(resourceMap.getIcon("jButtonPrevious.icon")); // NOI18N
        jButtonPrevious.setText(resourceMap.getString("jButtonPrevious.text")); // NOI18N
        jButtonPrevious.setBorder(null);
        jButtonPrevious.setBorderPainted(false);
        jButtonPrevious.setContentAreaFilled(false);
        jButtonPrevious.setDoubleBuffered(true);
        jButtonPrevious.setFocusPainted(false);
        jButtonPrevious.setHideActionText(true);
        jButtonPrevious.setName("jButtonPrevious"); // NOI18N
       

        currentPage.setText(resourceMap.getString("currentPage.text")); // NOI18N
        currentPage.setName("currentPage"); // NOI18N
        currentPage.setHorizontalTextPosition(SwingUtilities.TRAILING);
        currentPage.setHorizontalAlignment(SwingUtilities.RIGHT);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        nrPages.setText(resourceMap.getString("nrPages.text")); // NOI18N
        nrPages.setName("nrPages"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonPrevious)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nrPages)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonNext)
                .addGap(18,18,18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                )
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonNext)
                .addComponent(jButtonPrevious)
                .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nrPages)
                    .addComponent(jLabel2)
                    .addComponent(currentPage)))
                )
        );        
    }
    
    @Override
    public void paintComponent(Graphics g) {
    	super.paintComponent(g);
    	updateProgressBar();
    }
    
    // Variables declaration - do not modify
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPrevious;
    private javax.swing.JLabel currentPage;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel nrPages;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration    
    private ContactListEntryEvent ev;       
   
    public JProgressBar getProgressBar() {
        return this.jProgressBar1;
    }

    public void finishWorker(ContactListEntryEvent event) {		
    	ev = event;
    	if (!onlyRoster) {
    		int size = ((List<ContactListEntry>) ev.getSource()).size();
    		currentPage.setText(("1"));
    		if(this.groupsPanel.isTabParent()) {
    			Paginator.CURRENT_PAGETAB = 1;
    		}
    		else {
    			Paginator.CURRENT_PAGEDIALOG = 1;
    		}    		
    		nrPages.setText(String.valueOf(Paginator.getNoPages(size)));
    		buildUserPhonebookPanels();
    	} else {
    		buildUserImPanels();
    	}
            		
    }
    
    public void updateProgress(ContactListEntryEvent event) {
    	ev = event;
    	int size = ((List<ContactListEntry>) ev.getSource()).size();
    	updateProgressBar();
    	nrPages.setText(String.valueOf(Paginator.getNoPages(size)));
    }
    
    private void updateProgressBar() {
    	jProgressBar1.setValue(Paginator.DOWNLOADED_ENTRIES);
    	jProgressBar1.setMaximum(Paginator.PHONEBOOK_ENTRIES);
    	if (Paginator.DOWNLOADED_ENTRIES >= Paginator.PHONEBOOK_ENTRIES) {
    		deleteProgressBar();
    	}
    	if (CachePhoneBook.downloadFinished && Paginator.getNoDownloadedPages() < 2) {
    		setVisible(false);
    	}
    }
    
    public void deleteProgressBar() {
    	this.jProgressBar1.setVisible(false);      
    }    
   
    @Action
	public void nextPage() {
		this.getParent().setCursor(hourglassCursor);
		int nextPageNr = (this.groupsPanel.isTabParent()) ? Paginator.CURRENT_PAGETAB
				: Paginator.CURRENT_PAGEDIALOG;
		int size = ((List<ContactListEntry>) ev.getSource()).size();
		if ((nextPageNr + 1) > Paginator.getNoPages(size)) {
			this.getParent().setCursor(defaultCursor);
			return;
		}
		if (this.groupsPanel.isTabParent()) {
			Paginator.CURRENT_PAGETAB++;
		} else {
			Paginator.CURRENT_PAGEDIALOG++;
		}
		currentPage.setText((String.valueOf((this.groupsPanel.isTabParent()) ? Paginator.CURRENT_PAGETAB
						: Paginator.CURRENT_PAGEDIALOG)));
		buildUserPhonebookPanels();
		this.getParent().setCursor(defaultCursor);
		System.gc();
	}
   
    @Action
	public void prevPage() {
		this.getParent().setCursor(hourglassCursor);
		int prevPageNr = (this.groupsPanel.isTabParent()) ? Paginator.CURRENT_PAGETAB
				: Paginator.CURRENT_PAGEDIALOG;
		if (prevPageNr < 2) {

			this.getParent().setCursor(defaultCursor);
			return;
		}
		if (this.groupsPanel.isTabParent()) {
			Paginator.CURRENT_PAGETAB--;
		} else {
			Paginator.CURRENT_PAGEDIALOG--;
		}

		int size = ((List<ContactListEntry>) ev.getSource()).size();

		currentPage.setText((String.valueOf((this.groupsPanel.isTabParent()) ? Paginator.CURRENT_PAGETAB
						: Paginator.CURRENT_PAGEDIALOG)));
		nrPages.setText(String.valueOf(Paginator.getNoPages(size)));
		buildUserPhonebookPanels();
		this.getParent().setCursor(defaultCursor);

		System.gc();
	}
   
    public void buildUserImPanels() {
    	List<ContactListEntry> list = (List<ContactListEntry>) ev.getSource();
		List<UserMiniPanelGloss> resultsInsideRoster = new ArrayList<UserMiniPanelGloss>();
    	for (ContactListEntry entry : list) {
    		ContactItemWrapper ciw = (ContactItemWrapper)entry;
			if (ciw != null) {
				UserMiniPanelGloss umpg = new UserMiniPanelGloss(ciw);
				umpg.setUserStatusVisible(false);
				resultsInsideRoster.add(umpg);
			}     		
    	}
		UserGroupPanel ugpInsiders = createUserGroupPanel(
				resultsInsideRoster,
				resourceMap.getString("Call.contactList.insiders.title"), groupsPanel.isTabParent());
		List<UserGroupPanel> results = new ArrayList<UserGroupPanel>();
		results.add(ugpInsiders);		
		groupsPanel.setUserGrupPanels(results);   	    	
    }
    
	public void buildUserPhonebookPanels() {
		int usersPerPage = Paginator.USERS_PER_PAGE;
		List<ContactListEntry> list = (List<ContactListEntry>) ev.getSource();

		if (list != null && list.size() > 0) {
			// Get the server address to append to the ImId conf0igure in the
			// phonebook
			// in order to construct the bare JID and be able to retrieve the
			// user
			// information from IM groups:
			String imId = null;
			List<UserMiniPanelGloss> resultsInsideRoster = new ArrayList<UserMiniPanelGloss>();
			List<UserMiniPanelGloss> resultsOutsideRoster = new ArrayList<UserMiniPanelGloss>();
			// get the current page
			int crtPage = (this.groupsPanel.isTabParent()) ? Paginator.CURRENT_PAGETAB
					: Paginator.CURRENT_PAGEDIALOG;
			int limit1 = (usersPerPage * (crtPage - 1));
			int limit2 = (limit1 + usersPerPage);
			if (limit2 > list.size())
				limit2 = list.size();
			for (int i = limit1; i < limit2; i++) {
				ContactListEntry u = list.get(i);
				if (u instanceof ContactItemWrapper) {
					UserMiniPanelGloss umpg = new UserMiniPanelGloss(u);
					umpg.setUserStatusVisible(false);
					resultsInsideRoster.add(umpg);
				} else {
					UserMiniPanelGloss umpg = new UserMiniPanelGloss(u);
					resultsOutsideRoster.add(umpg);
				}
			}

			// create 2 groups and populate them with the two lists:
			// First - the insiders:
			List<UserGroupPanel> results = new ArrayList<UserGroupPanel>();
			if (!resultsInsideRoster.isEmpty()) {
				UserGroupPanel ugpInsiders = createUserGroupPanel(
						resultsInsideRoster,
						resourceMap.getString("Call.contactList.insiders.title"),
						groupsPanel.isTabParent());
				results.add(ugpInsiders);
			}
			// Second - the outsiders:
			if (!resultsOutsideRoster.isEmpty()) {
				UserGroupPanel ugpOutsiders = createUserGroupPanel(
						resultsOutsideRoster,
						resourceMap.getString("Call.contactList.outsiders.title"),
						false);
				results.add(ugpOutsiders);
			}
			groupsPanel.setUserGrupPanels(results);
		}
		System.gc();
	}
        
        public GroupsPanel getGroupsPanel()
        {
            return this.groupsPanel;
        }
        
    private UserGroupPanel createUserGroupPanel(List<UserMiniPanelGloss> users, String title, boolean canShowVcard) {
        UserGroupPanel ugp = new UserGroupPanel(title, canShowVcard, true);
        ugp.setUserMiniPanels(users);
        ugp.addMouseListenersToMiniPanels(mouseListener);
        return ugp;
    }

	public boolean isOnlyRoster() {
		return onlyRoster;
	}

	public MouseListener getMouseListener() {
		return mouseListener;
	}          
}