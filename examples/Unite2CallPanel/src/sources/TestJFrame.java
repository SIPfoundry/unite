package sources;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import org.ezuce.phone.Phone;
import org.ezuce.phone.User;
import org.jitsi.service.neomedia.device.MediaDevice;


public class TestJFrame extends javax.swing.JFrame implements Observer{

    private User m_user = new User();
    private Phone m_phone;
    private List<JFrame> frameList = new ArrayList<JFrame>();
    
    
    /**
     * Creates new form TestJFrame
     */
    public TestJFrame() throws Exception {
        initComponents();
        init();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoPanel = new sources.InfoPanel();
        audioVideoScreenSharingPanel = new sources.AudioVideoScreenSharingPanel();
        btnShowVideo = new javax.swing.JButton();
        btnShowScreenSharing = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Call test window");

        infoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection panel"));

        audioVideoScreenSharingPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnShowVideo.setText("Show/Hide VideoPanel");
        btnShowVideo.setToolTipText("");
        btnShowVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowVideoActionPerformed(evt);
            }
        });

        btnShowScreenSharing.setText("Show/Hide Screen Sharing");
        btnShowScreenSharing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowScreenSharingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(audioVideoScreenSharingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnShowVideo, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(btnShowScreenSharing, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnShowVideo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnShowScreenSharing))
                    .addComponent(audioVideoScreenSharingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowVideoActionPerformed
        this.audioVideoScreenSharingPanel.getVideoCallJPanel()
                .setVisible(!this.audioVideoScreenSharingPanel.getVideoCallJPanel().isVisible());
    }//GEN-LAST:event_btnShowVideoActionPerformed

    private void btnShowScreenSharingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowScreenSharingActionPerformed
        this.audioVideoScreenSharingPanel.getScreenSharingPanel()
                .setVisible(!this.audioVideoScreenSharingPanel.getScreenSharingPanel().isVisible());
    }//GEN-LAST:event_btnShowScreenSharingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TestJFrame().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(TestJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private sources.AudioVideoScreenSharingPanel audioVideoScreenSharingPanel;
    private javax.swing.JButton btnShowScreenSharing;
    private javax.swing.JButton btnShowVideo;
    private sources.InfoPanel infoPanel;
    // End of variables declaration//GEN-END:variables
 
   
    
    
    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {                
        m_user.setUserName(infoPanel.getTxtUser().getText());
    	m_user.setPassword(infoPanel.getTxtPassword().getText());
    	m_user.setServer(infoPanel.getTxtServer().getText());
    	m_user.setPort(infoPanel.getTxtPort().getText());
    	m_user.addObserver(this);
    	m_phone.registerUser(m_user);
    }
    
    private void init() throws Exception
    {
        m_phone = new Phone();
        m_phone.init();               
        
        infoPanel.getBtnRegister().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(infoPanel.isRegistered())
                {
                    unregButtonActionPerformed(evt);
                }
                else
                {
                    registerButtonActionPerformed(evt);
                }
            }
        });
        
        
        infoPanel.getBtnCall().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callButtonActionPerformed(evt);
            }
        });
        
        
         audioVideoScreenSharingPanel.getAudioCallJPanel().getTglBtnCam().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	attachVideoActionPerformed(evt);
            }
        });
        
        audioVideoScreenSharingPanel.getAudioCallJPanel().getTglBtnScreenSharing().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shareDesktopActionPerformed(evt);
            }
        });
        
        audioVideoScreenSharingPanel.getAudioCallJPanel().getBtnEnd().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endCallActionPerformed(evt);
            }
        });
        
        audioVideoScreenSharingPanel.getAudioCallJPanel().getBtnAnswer().addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent evt){
                answerButtonActionPerformed(evt);
            }
        });
                                
    }
    
    private void answerButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	m_phone.answerIncomingCall(m_user.getUniteCall().getCall());    
        audioVideoScreenSharingPanel.getAudioCallJPanel().startCallDurationTimer();
    }

    private void endCallActionPerformed(java.awt.event.ActionEvent evt) {
        m_phone.hangupCall(m_user.getUniteCall().getCall());
        audioVideoScreenSharingPanel.getAudioCallJPanel().stopCallDurationTimer();
    }
    
    
    private void unregButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        m_phone.unregisterUser(m_user);
    } 

     private void callButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	   m_phone.makeCall(m_user, infoPanel.getTxtUserToCall().getText());
           audioVideoScreenSharingPanel.getAudioCallJPanel().startCallDurationTimer();
     }
    	
    
    private void attachVideoActionPerformed(java.awt.event.ActionEvent evt) {
    	boolean enable = !m_phone.isLocalVideoEnabled(m_user.getUniteCall().getCall());
    	m_phone.enableLocalVideo(m_user.getUniteCall().getCall(), enable);
    }
    
    private void shareDesktopActionPerformed(java.awt.event.ActionEvent evt) {
		List<MediaDevice> devices = m_phone.getMediaDevices();
		if (devices.size() > 0) {
			boolean enable = !m_phone.isDesktopSharingEnabled(m_user.getUniteCall().getCall());
			m_phone.enableDesktopSharing(m_user.getUniteCall().getCall(), devices.get(0), enable);
		} else {
			System.out.println("No available Device to Screen Share");
		}
    }
    
    @Override
    public void update(Observable o, Object arg) {
        if (m_user.isRegistered()) {
            infoPanel.getLblStatusRegister().setText("Registered!");
            infoPanel.getBtnRegister().setText("Unregister");            
        } else {
            infoPanel.getLblStatusRegister().setText("Not Registered");
            infoPanel.getBtnRegister().setText("Register");
        }
        
        if (m_user.isCallInProgress()) {
            audioVideoScreenSharingPanel.getAudioCallJPanel().updateGuiCallInProgress();
        } else if (m_user.isCallIncomming()) {
        	audioVideoScreenSharingPanel.getAudioCallJPanel().updateGuiCallIsIncoming();
        } else {
            audioVideoScreenSharingPanel.getAudioCallJPanel().initVisibility();
        }
        for (JFrame frame : frameList) {
        	frame.dispose();
        }
        frameList.clear();
        
        for (Component screen : m_user.getLocalScreenList()) {
        	JFrame frame = new JFrame();
        	screen.setPreferredSize(new Dimension(640, 480));
        	frame.add(screen);
        	frame.pack();
        	frame.setVisible(true);
        	frameList.add(frame);
        }
        for (Component screen : m_user.getRemoteScreenList()) {
        	JFrame frame = new JFrame();
        	frame.add(screen);
        	screen.setPreferredSize(new Dimension(640, 480));
        	frame.pack();
        	frame.setVisible(true);
        	frameList.add(frame);
        }
    }
        
}
