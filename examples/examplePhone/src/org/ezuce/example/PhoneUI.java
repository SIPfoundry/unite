package org.ezuce.example;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JFrame;

import net.java.sip.communicator.service.protocol.Call;

import org.ezuce.unitemedia.context.DeviceContext;
import org.ezuce.unitemedia.event.UniteCallEventType;
import org.ezuce.unitemedia.event.UniteEvent;
import org.ezuce.unitemedia.event.UniteRegistrationEventType;
import org.ezuce.unitemedia.event.UniteVideoEventType;
import org.ezuce.unitemedia.phone.LocalRemoteVideo;
import org.ezuce.unitemedia.phone.Phone;
import org.ezuce.unitemedia.phone.User;
import org.jitsi.service.neomedia.device.MediaDevice;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class PhoneUI extends javax.swing.JFrame implements Observer {
    private User m_user = new User();
    private Phone m_phone;
    private Call m_call;
    private List<JFrame> frameList = new ArrayList<JFrame>();
    private JButton btnControlDesktop;
    private boolean controlEnabled = true;
    /** Creates new form Find */
    public PhoneUI() {
        initComponents();
        answerButton.setVisible(false);
        endCall.setVisible(false);
        shareDesktop.setVisible(false);
        unregButton.setVisible(false);
        attachVideoButton.setVisible(false);
        holdButton.setVisible(false);
        btnControlDesktop.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        userNameLabel = new javax.swing.JLabel();
        userField = new javax.swing.JTextField();
        registerButton = new javax.swing.JButton();
        callButton = new javax.swing.JButton();
        attachVideoButton = new javax.swing.JButton();
        serverField = new javax.swing.JTextField();
        serverLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        registerStatusLabel = new javax.swing.JLabel();
        callUserLabel = new javax.swing.JLabel();
        callField = new javax.swing.JTextField();
        callStatusLabel = new javax.swing.JLabel();
        shareDesktop = new javax.swing.JButton();
        answerButton = new javax.swing.JButton();
        endCall = new javax.swing.JButton();
        unregButton = new javax.swing.JButton();
        videoCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Find");

        userNameLabel.setText("User:");

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        callButton.setBackground(new java.awt.Color(51, 204, 255));
        callButton.setText("Call");
        callButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callButtonActionPerformed(evt);
            }
        });
        
        attachVideoButton.setBackground(new java.awt.Color(51, 204, 255));
        attachVideoButton.setText("Attach/Detach Video");
        attachVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	attachVideoActionPerformed(evt);
            }
        });
        

        serverLabel.setText("Server:");

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        passwordLabel.setText("Password:");

        portField.setText("5060");
        portField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portFieldActionPerformed(evt);
            }
        });

        portLabel.setText("Port:");

        registerStatusLabel.setText("Not Registered");

        callUserLabel.setText("User to call");

        callStatusLabel.setText("Call Status");

        shareDesktop.setText("Share/Unshare Desktop");
        shareDesktop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shareDesktopActionPerformed(evt);
            }
        });

        answerButton.setText("Answer");
        answerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerButtonActionPerformed(evt);
            }
        });

        endCall.setText("Hangup");
        endCall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endCallActionPerformed(evt);
            }
        });

        unregButton.setText("Unregister");
        unregButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unregButtonActionPerformed(evt);
            }
        });

        videoCheck.setText("Enable Video");
        videoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoCheckActionPerformed(evt);
            }
        });
        
        holdButton = new JButton("Hold");
        holdButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		m_phone.putOnOrOffHold(m_call);
        	}
        });
        
        btnControlDesktop = new JButton("Control Desktop");
        btnControlDesktop.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg) {
        		m_phone.enableDesktopRemoteControl(m_call.getCallPeers().next(), controlEnabled);
        		controlEnabled = !controlEnabled;
        	}
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(318)
        			.addComponent(callStatusLabel)
        			.addContainerGap(398, Short.MAX_VALUE))
        		.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(userNameLabel)
        								.addComponent(passwordLabel)
        								.addComponent(serverLabel)
        								.addComponent(portLabel))
        							.addGap(71))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(registerButton, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(unregButton)
        							.addPreferredGap(ComponentPlacement.RELATED))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(callUserLabel)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(callField, GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        							.addPreferredGap(ComponentPlacement.RELATED))))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(53)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        						.addComponent(btnControlDesktop, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(shareDesktop, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        					.addGap(48)))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(videoCheck)
        					.addContainerGap())
        				.addGroup(Alignment.TRAILING, layout.createParallelGroup(Alignment.TRAILING)
        					.addGroup(layout.createSequentialGroup()
        						.addComponent(attachVideoButton)
        						.addContainerGap(311, Short.MAX_VALUE))
        					.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        						.addGroup(layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(passwordField, GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
        							.addComponent(serverField, GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
        							.addComponent(portField, GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
        							.addComponent(userField, GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
        						.addGap(160))
        					.addComponent(registerStatusLabel, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 203, GroupLayout.PREFERRED_SIZE)
        					.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        						.addComponent(callButton)
        						.addGap(18)
        						.addComponent(answerButton)
        						.addGap(18)
        						.addComponent(holdButton)
        						.addGap(18)
        						.addComponent(endCall)
        						.addContainerGap()))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(userNameLabel)
        				.addComponent(userField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(16)
        					.addComponent(passwordLabel))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(10)
        					.addComponent(passwordField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(serverField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(serverLabel))))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(portLabel)
        				.addComponent(portField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(registerButton)
        				.addComponent(registerStatusLabel)
        				.addComponent(unregButton))
        			.addGap(24)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(callUserLabel)
        				.addComponent(callField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(callButton)
        				.addComponent(answerButton)
        				.addComponent(holdButton)
        				.addComponent(endCall))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(shareDesktop)
        				.addComponent(attachVideoButton))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(videoCheck)
        				.addComponent(btnControlDesktop))
        			.addGap(18)
        			.addComponent(callStatusLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        			.addGap(39))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>

    private void unregButtonActionPerformed(java.awt.event.ActionEvent evt) {
        m_phone.unregisterUser(m_user);
    	m_phone.uninstallAccount(m_user);
    }                                           

    private void videoCheckActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {
        m_user.setUserName(userField.getText());
    	m_user.setPassword(passwordField.getText());
    	m_user.setServer(serverField.getText());
    	m_user.setPort(portField.getText());
    	m_user.addObserver(this);
    	m_phone.installAccount(m_user);
    	m_phone.registerUser(m_user);
    }

    private void portFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void callButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	if(videoCheck.isSelected()) {
    		m_phone.makeVideoCall(m_user, callField.getText());
    	} else {
    		m_phone.makeCall(m_user, callField.getText());
    	}
    	
    }
    
    private void attachVideoActionPerformed(java.awt.event.ActionEvent evt) {
    	boolean enable = !m_phone.isLocalVideoEnabled(m_call);
    	m_phone.enableLocalVideo(m_call, enable);
    }

	private void shareDesktopActionPerformed(java.awt.event.ActionEvent evt) {
		List<MediaDevice> devices = DeviceContext.getMediaDevices();
		if (devices.size() > 0) {
			boolean enable = !m_phone.isDesktopSharingEnabled(m_call);
			m_phone.enableDesktopSharing(m_call, devices.get(0), enable);
		} else {
			System.out.println("No available Device to Screen Share");
		}
	}

    private void answerButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	if(videoCheck.isSelected()) {
    		m_phone.answerIncomingVideoCall(m_call);
    	} else {
    		m_phone.answerIncomingCall(m_call);
    	}
    }

    private void endCallActionPerformed(java.awt.event.ActionEvent evt) {
        m_phone.hangupCall(m_call);
    }
    
    /**
     * @param args the command line arguments
     */
    public void update(Observable o, Object arg) {
    	if (!(arg instanceof UniteEvent)) {
    		return;
    	}
    	UniteEvent event = (UniteEvent)arg;
    	if (event.getEventType() instanceof UniteRegistrationEventType)
    		switch((UniteRegistrationEventType)event.getEventType()) {
            	case REGISTERED:
            		registerStatusLabel.setText("Registered!");
            		unregButton.setVisible(true);
            		registerButton.setVisible(false);
            		break;
            	case UNREGISTERED:
            		registerStatusLabel.setText("Not Registered");
            		unregButton.setVisible(false);
            		registerButton.setVisible(true);
            		break;
        } else if (event.getEventType() instanceof UniteCallEventType) {
        	switch((UniteCallEventType)event.getEventType()) {
            	case INCOMING_CALL_IN_PROGRESS:
            		callStatusLabel.setText("In Progress!");
            		answerButton.setVisible(false);
            		endCall.setVisible(true);
            		shareDesktop.setVisible(true);
            		attachVideoButton.setVisible(true);
            		holdButton.setVisible(true);
            		btnControlDesktop.setVisible(true);
            		break;
            	case OUTGOING_CALL_IN_PROGRESS:
                	callStatusLabel.setText("In Progress!");
                	answerButton.setVisible(false);
                	endCall.setVisible(true);
                	shareDesktop.setVisible(true);
                	attachVideoButton.setVisible(true);
                	holdButton.setVisible(true);
                	btnControlDesktop.setVisible(true);
                	break;
            	case CALL_OUTGOING:
            		m_call = m_user.getUniteCalls().iterator().next().getCall();
            		break;
            	case CALL_INCOMING:
            		m_call = m_user.getUniteCalls().iterator().next().getCall();
            		callStatusLabel.setText("Ringing...");
            		answerButton.setVisible(true);
            		endCall.setVisible(false);
            		shareDesktop.setVisible(false);
            		attachVideoButton.setVisible(false);
            		holdButton.setVisible(false);
            		break;
            	case CALL_ENDED:
            		callStatusLabel.setText("Call Status");
            		answerButton.setVisible(false);
            		endCall.setVisible(false);
            		shareDesktop.setVisible(false);
            		attachVideoButton.setVisible(false);
            		holdButton.setVisible(false);
            		btnControlDesktop.setVisible(false);
            		btnControlDesktop.setVisible(false);
            		refreshScreens();
            		break;
        	}
        } else if(event.getEventType() instanceof UniteVideoEventType) {
        	switch((UniteVideoEventType)event.getEventType()) {
            	case REMOTE_SCREEN_ADDED:
            		refreshScreens();
            		break;
            	case REMOTE_SCREEN_REMOVED:
            		refreshScreens();
            		break;
            	case LOCAL_SCREEN_ADDED:
            		refreshScreens();
            		break;
            	case LOCAL_SCREEN_REMOVED:
            		refreshScreens();
            		break;
        	}
        }

    }
    private void refreshScreens() {
        for (JFrame frame : frameList) {
        	frame.dispose();
        }
        frameList.clear();
        
        EventQueue.invokeLater(new Runnable() {
        	public void run() {
        		LocalRemoteVideo video = m_phone.retrieveVideoStreamingComponents(m_user);
        		if (video.getLocal() != null) {
        			JFrame frame = new JFrame();
        			frame.setPreferredSize(new Dimension(640, 480));
        			frame.add(video.getLocal());
        			frame.pack();
        			frame.setVisible(true);
        			frameList.add(frame);
        		}
        		if (video.getRemote() != null) {
                	JFrame frame = new JFrame();
                	frame.add(video.getRemote());
                	frame.setPreferredSize(new Dimension(640, 480));
                	frame.pack();
                	frame.setVisible(true);
                	frameList.add(frame);        			
        		}
        	}
        });
    }
    public void setPhone(Phone phone) {
		m_phone = phone;
    }
    // Variables declaration - do not modify
    private javax.swing.JButton answerButton;
    private javax.swing.JButton holdButton;
    private javax.swing.JButton callButton;
    private javax.swing.JButton attachVideoButton;
    private javax.swing.JTextField callField;
    private javax.swing.JLabel callStatusLabel;
    private javax.swing.JLabel callUserLabel;
    private javax.swing.JButton endCall;
    private javax.swing.JTextField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField portField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JButton registerButton;
    private javax.swing.JLabel registerStatusLabel;
    private javax.swing.JTextField serverField;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JButton shareDesktop;
    private javax.swing.JButton unregButton;
    private javax.swing.JTextField userField;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JCheckBox videoCheck;
}