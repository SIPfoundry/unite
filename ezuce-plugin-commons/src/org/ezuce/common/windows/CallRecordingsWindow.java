package org.ezuce.common.windows;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

import net.sf.fmj.media.Log;

import org.ezuce.common.ComponentMover;
import org.jivesoftware.Spark;
import org.jivesoftware.resource.Res;
import org.jivesoftware.spark.SparkManager;

/**
 *
 * @author Razvan
 */
public class CallRecordingsWindow extends javax.swing.JFrame {
    

    private org.ezuce.common.ui.panels.CallRecordingsPanel callRecordingsPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JMenuBar jMenuBar;
    private JButton exitButton;
    private static CallRecordingsWindow singleton;
    private ComponentMover componentMover;
	
    /**
     * Creates new form CallRecordingsWindow
     */
    public CallRecordingsWindow() {
        initComponents();
                
        this.setSize(350, 400);       
                
        this.callRecordingsPanel.setBorder(BorderFactory.createMatteBorder(0,1,1,1,Color.BLACK));
        this.filler1.setBorder(BorderFactory.createMatteBorder(0, 1, 0, 1, Color.BLACK));
        this.jMenuBar.setBorder(BorderFactory.createMatteBorder(1, 1, 0, 1,Color.BLACK));               
    }
    

    
    public static synchronized CallRecordingsWindow getInstance() {
        if (null == singleton) {
            singleton = new CallRecordingsWindow();
            return singleton;
        }
        return singleton;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 8), new java.awt.Dimension(0, 8), new java.awt.Dimension(32767, 8));
        callRecordingsPanel = new org.ezuce.common.ui.panels.CallRecordingsPanel();
        jMenuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Recordings");
        setName("RecordingsWindow"); // NOI18N
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(270, 400));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        
        jMenuBar.setDoubleBuffered(true);
        jMenuBar.setName("jMenuBar"); // NOI18N
        

        
        
        JPanel titlePanel = new JPanel();
        titlePanel.setLayout(new FlowLayout());
        titlePanel.setOpaque(false);
        titlePanel.setSize(getSize().width, titlePanel.getSize().height);
        JLabel title = new JLabel(Res.getString("recordings.window.title"));
        title.setForeground(new Color(46, 85, 102));
        title.setFont(new java.awt.Font("Tahoma", 1, 12));
        titlePanel.add(title);                    
        
        
        JPanel btnPanel = new JPanel();
        btnPanel.setLayout(new BorderLayout());               
        btnPanel.setOpaque(false);
                        
        exitButton = new JButton();
        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/close_rec_list.png"))); 
        exitButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/close_rec_list_hover.png"))); 
        exitButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/close_rec_list.png"))); 
        exitButton.setContentAreaFilled(false);
        exitButton.setDoubleBuffered(true);
        exitButton.setFocusPainted(false);
        exitButton.setOpaque(false);
        exitButton.setBorder(null);
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                close();
            }
        });
        
        btnPanel.add(exitButton, BorderLayout.EAST);        
        btnPanel.add(titlePanel, BorderLayout.CENTER);   
        
        
        if (!Spark.isMac()){
        	setJMenuBar(jMenuBar);
        	jMenuBar.add(btnPanel);  
        	componentMover=new ComponentMover(this, jMenuBar);  
        }else{
        	btnPanel.setBorder(BorderFactory.createLineBorder(Color.black));
        	getContentPane().add(btnPanel);
        	componentMover=new ComponentMover(this, btnPanel); 
        }
        
        
        filler1.setBackground(new java.awt.Color(246, 246, 246));
        filler1.setDoubleBuffered(true);
        filler1.setName("filler1"); // NOI18N
        filler1.setOpaque(true);
        getContentPane().add(filler1);

        callRecordingsPanel.setBackground(new java.awt.Color(246, 246, 246));
        callRecordingsPanel.setName("callRecordingsPanel"); // NOI18N
        callRecordingsPanel.setPreferredSize(new java.awt.Dimension(350, 388));
        getContentPane().add(callRecordingsPanel);

        
        
        
        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected void close()
    {       
        this.dispatchEvent(new WindowEvent(CallRecordingsWindow.this, WindowEvent.WINDOW_CLOSING));
        this.callRecordingsPanel.clearCallRecordings();
        this.callRecordingsPanel.clearConfRecordings();
        this.setVisible(false);
        this.dispose();
    }
    
    @Override
    public void setVisible(boolean b)
    {
        if (b)
        {
            Point mainWindowLocation = SparkManager.getMainWindow().getLocationOnScreen();
            Dimension mainWindowSize = SparkManager.getMainWindow().getSize();
            
            int x = mainWindowLocation.x + mainWindowSize.width + 5;
            int y = mainWindowLocation.y + 5;
            
            final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            int actualX = x;
            int actualY = y - 5;
            if ((int) screenSize.getWidth() - getPreferredSize().getWidth() < x) {
                actualX = (int) mainWindowLocation.getX() - (int) getPreferredSize().getWidth();
            }

            // keep this away from bottom edge
            if (actualY + getHeight() > screenSize.height - 64) {
                actualY -= actualY + getHeight() - screenSize.height + 64;
            }
            setLocation(actualX, actualY);
            callRecordingsPanel.refreshCallRecordings();
            callRecordingsPanel.refreshConfRecordings();
        }
        super.setVisible(b);
    }
    
}
